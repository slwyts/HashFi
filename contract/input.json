{"language":"Solidity","settings":{"optimizer":{"enabled":true,"runs":20000},"viaIR":true,"evmVersion":"cancun","outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]},"sources":{"hashfi.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\n\ncontract HashFi is ERC20, Ownable, ReentrancyGuard, Pausable {\n    using SafeMath for uint256;\n\n    IERC20 private usdtToken;\n\n    uint256 private constant TOTAL_SUPPLY = 200_000_000 * 1e18;\n\n    event Staked(address indexed user, uint256 orderId, uint256 amount, uint8 level);\n    event ReferrerBound(address indexed user, address indexed referrer);\n    event Withdrawn(address indexed user, uint256 hafAmount, uint256 fee);\n    event GenesisNodeApplied(address indexed user);\n    event GenesisNodeApproved(address indexed user);\n    event GenesisNodeRejected(address indexed user);\n    event RewardsClaimed(address indexed user, uint256 staticRewards, uint256 dynamicRewards, uint256 genesisRewards);\n    event PriceUpdated(uint256 newPrice);\n    event Swapped(address indexed user, address indexed fromToken, address indexed toToken, uint256 fromAmount, uint256 toAmount);\n    event TokensBurned(address indexed user, uint256 hafAmount, uint256 usdtAmount);\n    event TeamLevelUpdated(address indexed user, uint8 oldLevel, uint8 newLevel);\n    event RewardBurned(address indexed referrer, address indexed investor, uint256 fullRewardUsdt, uint256 actualRewardUsdt, uint256 burnedUsdt);\n\n    enum RewardType { Static, Direct, Share, Team, Genesis }\n    event RewardDistributed(address indexed user, address indexed fromUser, RewardType rewardType, uint256 usdtAmount, uint256 hafAmount);\n\n    \n    struct RewardRecord {\n        uint256 timestamp;\n        address fromUser;\n        RewardType rewardType;\n        uint256 usdtAmount;\n        uint256 hafAmount;\n    }\n\n    struct User {\n        address referrer;\n        uint8 teamLevel; // V0-V5\n        uint256 totalStakedAmount; // 个人总投资额\n        uint256 teamTotalPerformance; // 个人伞下总业绩 (用于给上级计算小区业绩)\n        address[] directReferrals; // 直接推荐的用户列表\n        uint256[] orderIds; // 用户的订单ID列表\n\n        bool isGenesisNode;\n        uint256 genesisDividendsWithdrawn; // 已领取的创世节点分红 (USDT本位)\n\n        // 动态奖励 (直推奖+分享奖)\n        uint256 dynamicRewardTotal; // 累计获得的动态总奖励 (HAF本位)\n        uint256 dynamicRewardReleased; // 已释放的动态奖励 (HAF本位)\n        uint256 dynamicRewardStartTime; // 第一个动态奖励的开始时间\n        uint256 dynamicRewardClaimed; // 已领取的动态奖励 (HAF本位)\n\n        // 分享奖相关\n        uint256 totalStaticOutput; // 个人所有订单累计产出的总静态收益 (USDT本位)\n    }\n\n    struct Order {\n        uint256 id;\n        address user;\n        uint8 level; // 1:青铜, 2:白银, 3:黄金, 4:钻石\n        uint256 amount; // 质押的USDT数量 (18位小数)\n        uint256 totalQuota; // 总释放额度 (USDT本位)\n        uint256 releasedQuota; // 已释放额度 (USDT本位)\n        uint256 totalQuotaHaf; // 总释放额度 (HAF数量) - 用于准确判断出局\n        uint256 releasedHaf; // 已释放HAF数量 - 用于准确判断出局\n        uint256 startTime;\n        uint256 lastSettleTime; // 上次结算收益的时间\n        bool isCompleted;\n    }\n\n    struct StakingLevelInfo {\n        uint256 minAmount;\n        uint256 maxAmount;\n        uint256 multiplier; // 出局倍数 (例如, 1.5倍 存为 150)\n        uint256 dailyRate; // 日利率 (例如, 0.7% 存为 70, 单位: 万分之一)\n    }\n\n    struct TeamLevelInfo {\n        uint256 requiredPerformance; // 达成需要的小区业绩 (USDT本位)\n        uint256 accelerationBonus; // 静态收益加速释放比例 (%)\n    }\n    \n    struct BtcMiningStats {\n        uint256 totalHashrate;      // 总算力 (H/s)\n        uint256 globalHashrate;     // 全网算力 (H/s)\n        uint256 dailyRewardPerT;    // 每T日收益 (使用6位小数)\n        uint256 currentDifficulty;  // 当前难度\n        uint256 btcPrice;           // BTC币价 (使用6位小数，如 50000.50 表示为 50000500000)\n        uint256 nextHalvingTime;    // 下次减产时间 (Unix timestamp)\n        uint256 totalMined;         // 累计已挖 (BTC数量，使用18位小数)\n        uint256 yesterdayMined;     // 昨日已挖 (BTC数量，使用18位小数)\n        uint256 lastUpdateTime;     // 最后更新时间\n    }\n    \n    struct GlobalStatistics {\n        uint256 totalDepositedUsdt;      // 总入金 (累计)\n        uint256 totalWithdrawnHaf;       // 总提现HAF数量\n        uint256 totalFeeCollectedHaf;    // 总手续费收入(HAF)\n        uint256 totalHafDistributed;     // 总HAF分发量\n        uint256 totalActiveUsers;        // 活跃用户数\n        uint256 totalCompletedOrders;    // 已完成订单数\n    }\n    // ================================================\n    \n    // 团队成员信息结构体\n    struct TeamMemberInfo {\n        address memberAddress;\n        uint8 teamLevel;\n        uint256 totalStakedAmount;\n        uint256 teamTotalPerformance;\n    }\n\n\n    // --- 状态变量 ---\n\n    mapping(address => User) public users;\n    Order[] public orders;\n\n    // 价格与费用\n    uint256 public hafPrice; // HAF的USDT价格, 使用18位小数精度\n    uint256 public constant PRICE_PRECISION = 1e18;\n    uint256 public withdrawalFeeRate = 5; // 提现手续费率, 5%\n    uint256 public swapFeeRate = 1; // 闪兑手续费, 1%\n    \n    // ========== 价格自动上涨机制 ==========\n    uint256 private lastPriceUpdateTime; // 上次价格更新时间（内部使用）\n    uint256 public dailyPriceIncreaseRate = 1; // 每日涨幅 千分之一 = 0.1%\n    bool public autoPriceUpdateEnabled = true; // 是否启用自动涨价\n    // ================================================\n    \n    // ========== 测试网时间单位配置 ==========\n    uint256 public TIME_UNIT; // 时间单位 \n    uint256 public DYNAMIC_RELEASE_PERIOD; // 动态奖励释放周期\n    // ================================================\n\n    // 配置信息\n    mapping(uint8 => StakingLevelInfo) public stakingLevels;\n    TeamLevelInfo[] public teamLevels;\n\n    // 创世节点\n    uint256 public genesisNodeCost = 5000 * 1e18;\n    uint256 public constant GENESIS_NODE_EXIT_MULTIPLIER = 3;\n    uint256 public globalGenesisPool; // 全局创世节点分红池 (USDT本位)\n    uint256 private totalGenesisShares; // 创世节点总份额（内部使用）\n    address[] private genesisNodes; // 所有创世节点列表（使用 getAllGenesisNodes() 访问）\n    address[] private activeGenesisNodes; // 活跃创世节点列表（使用 getActiveGenesisNodes() 访问）\n    address[] private pendingGenesisApplications; // 待审核申请（使用 getPendingGenesisApplications() 访问）\n    mapping(address => bool) public genesisNodeApplications; \n    mapping(address => bool) public isActiveGenesisNode;\n    \n    BtcMiningStats public btcStats;\n    \n    GlobalStatistics public globalStats;\n\n    constructor(address _usdtAddress, address _initialOwner) ERC20(\"Hash Fi Token\", \"HAF\") Ownable(_initialOwner) {\n\n        _mint(address(this), TOTAL_SUPPLY);\n\n        usdtToken = IERC20(_usdtAddress);\n        hafPrice = 1 * PRICE_PRECISION;\n        lastPriceUpdateTime = block.timestamp;\n\n        if (block.chainid == 97) {\n            TIME_UNIT = 10 minutes; \n            DYNAMIC_RELEASE_PERIOD = 100 minutes; \n        } else {\n            TIME_UNIT = 1 days; // 主网: 1天\n            DYNAMIC_RELEASE_PERIOD = 100 days; // 主网: 100天\n        }\n\n        // 初始化质押级别\n        stakingLevels[1] = StakingLevelInfo(100 * 1e18, 499 * 1e18, 150, 70);\n        stakingLevels[2] = StakingLevelInfo(500 * 1e18, 999 * 1e18, 200, 80);\n        stakingLevels[3] = StakingLevelInfo(1000 * 1e18, 2999 * 1e18, 250, 90);\n        stakingLevels[4] = StakingLevelInfo(3000 * 1e18, type(uint256).max, 300, 100);\n\n        // 初始化团队级别 (V0 - V5)\n        teamLevels.push(TeamLevelInfo(0, 0)); // V0\n        teamLevels.push(TeamLevelInfo(5000 * 1e18, 5)); // V1\n        teamLevels.push(TeamLevelInfo(20000 * 1e18, 10)); // V2\n        teamLevels.push(TeamLevelInfo(100000 * 1e18, 15)); // V3\n        teamLevels.push(TeamLevelInfo(300000 * 1e18, 20)); // V4\n        teamLevels.push(TeamLevelInfo(1000000 * 1e18, 25));// V5\n\n        btcStats = BtcMiningStats({\n            totalHashrate: 0,\n            globalHashrate: 0,\n            dailyRewardPerT: 0,\n            currentDifficulty: 0,\n            btcPrice: 0,\n            nextHalvingTime: 0,\n            totalMined: 0,\n            yesterdayMined: 0,\n            lastUpdateTime: block.timestamp\n        });\n    }\n\n    /**\n     * @dev 在交易前自动检查并更新HAF价格(懒加载触发)\n     */\n    modifier autoUpdatePrice() {\n        _updatePriceIfNeeded();\n        _;\n    }\n    \n    /**\n     * @dev 内部函数:检查并更新价格\n     */\n    function _updatePriceIfNeeded() internal {\n        if (!autoPriceUpdateEnabled) return;\n        \n        uint256 daysPassed = (block.timestamp - lastPriceUpdateTime) / TIME_UNIT;\n        if (daysPassed > 0) {\n            // 计算复利:每天涨千分之一\n            for (uint i = 0; i < daysPassed; i++) {\n                uint256 increase = hafPrice.mul(dailyPriceIncreaseRate).div(1000);\n                hafPrice = hafPrice.add(increase);\n            }\n            lastPriceUpdateTime = lastPriceUpdateTime.add(daysPassed.mul(TIME_UNIT));\n            emit PriceUpdated(hafPrice);\n        }\n    }\n    // ================================================\n\n    function bindReferrer(address _referrer) external whenNotPaused {\n        User storage user = users[msg.sender];\n        require(user.referrer == address(0), \"Referrer already bound\");\n        \n        if (msg.sender == owner()) {\n            user.referrer = address(0x0000000000000000000000000000000000000001);\n            emit ReferrerBound(msg.sender, address(0x0000000000000000000000000000000000000001));\n            return;\n        }\n\n        require(_referrer == owner() || users[_referrer].totalStakedAmount > 0, \"Referrer does not exist\");\n        require(_referrer != msg.sender, \"Cannot refer yourself\");\n        user.referrer = _referrer;\n        users[_referrer].directReferrals.push(msg.sender);\n        emit ReferrerBound(msg.sender, _referrer);\n    }\n\n    function stake(uint256 _amount) external nonReentrant whenNotPaused autoUpdatePrice {\n        require(users[msg.sender].referrer != address(0), \"Must bind a referrer first\");\n        uint8 level = _getStakingLevelByAmount(_amount);\n        require(level > 0, \"Invalid staking amount\");\n\n        // ✅ 修改：移除质押时的自动结算，减少重复记录产生\n        // _settleUserRewards(msg.sender);  // 注释掉这一行\n\n        usdtToken.transferFrom(msg.sender, address(this), _amount);\n\n        uint256 orderId = orders.length;\n        uint256 quota = _amount.mul(stakingLevels[level].multiplier).div(100);\n        \n        // 计算总释放HAF额度：quota(USDT) / 当前HAF价格\n        uint256 quotaHaf = quota.mul(PRICE_PRECISION).div(hafPrice);\n        \n        orders.push(Order(orderId, msg.sender, level, _amount, quota, 0, quotaHaf, 0, block.timestamp, block.timestamp, false));\n        User storage user = users[msg.sender];\n        user.orderIds.push(orderId);\n        user.totalStakedAmount = user.totalStakedAmount.add(_amount);\n\n        // ========== NEW: 更新全局统计 ==========\n        globalStats.totalDepositedUsdt = globalStats.totalDepositedUsdt.add(_amount);\n        if (user.orderIds.length == 1) {\n            // 首次质押，增加活跃用户数\n            globalStats.totalActiveUsers = globalStats.totalActiveUsers.add(1);\n        }\n        // ================================================\n\n        _updateAncestorsPerformanceAndRewards(msg.sender, _amount, level);\n        emit Staked(msg.sender, orderId, _amount, level);\n    }\n\n    function applyForGenesisNode() external whenNotPaused {\n        User storage user = users[msg.sender];\n        require(user.totalStakedAmount > 0, \"User must stake first\");\n        require(!user.isGenesisNode, \"Already a genesis node\");\n        require(!genesisNodeApplications[msg.sender], \"Application already pending\");\n\n        usdtToken.transferFrom(msg.sender, address(this), genesisNodeCost);\n        \n        // ========== MODIFIED: 改为待审核状态 ==========\n        genesisNodeApplications[msg.sender] = true;\n        pendingGenesisApplications.push(msg.sender); // 添加到待审核列表\n        // ================================================\n\n        emit GenesisNodeApplied(msg.sender);\n    }\n\n    function withdraw() external nonReentrant whenNotPaused autoUpdatePrice {\n        _settleUserRewards(msg.sender);\n        \n        (uint256 pendingStaticHaf, uint256 pendingDynamicHaf, uint256 pendingGenesisHaf) = getClaimableRewards(msg.sender);\n        uint256 totalClaimableHaf = pendingStaticHaf.add(pendingDynamicHaf).add(pendingGenesisHaf);\n        require(totalClaimableHaf > 0, \"No rewards to withdraw\");\n\n        User storage user = users[msg.sender];\n        \n        if (pendingDynamicHaf > 0) {\n            uint256 dynamicUsdtAmount = pendingDynamicHaf.mul(hafPrice).div(PRICE_PRECISION);\n            _addRewardRecord(msg.sender, address(0), RewardType.Direct, dynamicUsdtAmount, pendingDynamicHaf);\n        }\n        \n        user.dynamicRewardClaimed = user.dynamicRewardClaimed.add(pendingDynamicHaf);\n       \n        uint256 fee = totalClaimableHaf.mul(withdrawalFeeRate).div(100);\n        uint256 amountAfterFee = totalClaimableHaf.sub(fee);\n        \n        _updateOrderSettleTimes(msg.sender);\n\n        _distributeHaf(msg.sender, amountAfterFee);\n\n        globalStats.totalWithdrawnHaf = globalStats.totalWithdrawnHaf.add(amountAfterFee);\n        globalStats.totalFeeCollectedHaf = globalStats.totalFeeCollectedHaf.add(fee);\n\n        emit Withdrawn(msg.sender, amountAfterFee, fee);\n    }\n    \n    function swapUsdtToHaf(uint256 _usdtAmount) external nonReentrant whenNotPaused autoUpdatePrice {\n        require(_usdtAmount > 0, \"USDT amount must be positive\");\n        usdtToken.transferFrom(msg.sender, address(this), _usdtAmount);\n        \n        uint256 hafAmount = _usdtAmount.mul(PRICE_PRECISION).div(hafPrice);\n        uint256 fee = hafAmount.mul(swapFeeRate).div(100);\n        uint256 finalHafAmount = hafAmount.sub(fee);\n        \n        _distributeHaf(msg.sender, finalHafAmount);\n\n        emit Swapped(msg.sender, address(usdtToken), address(this), _usdtAmount, finalHafAmount);\n    }\n\n    function swapHafToUsdt(uint256 _hafAmount) external nonReentrant whenNotPaused autoUpdatePrice {\n        require(_hafAmount > 0, \"HAF amount must be positive\");\n        \n        _transfer(msg.sender, address(this), _hafAmount);\n        \n        uint256 usdtAmount = _hafAmount.mul(hafPrice).div(PRICE_PRECISION);\n        uint256 fee = usdtAmount.mul(swapFeeRate).div(100);\n        uint256 finalUsdtAmount = usdtAmount.sub(fee);\n        \n        require(usdtToken.balanceOf(address(this)) >= finalUsdtAmount, \"Insufficient USDT in contract\");\n        usdtToken.transfer(msg.sender, finalUsdtAmount);\n        \n        emit Swapped(msg.sender, address(this), address(usdtToken), _hafAmount, finalUsdtAmount);\n    }\n\n    \n    function _settleUserRewards(address _user) internal {\n        uint256[] memory orderIds = users[_user].orderIds;\n        for (uint i = 0; i < orderIds.length; i++) {\n            _settleStaticRewardForOrder(orderIds[i]);\n        }\n\n        if (users[_user].isGenesisNode) {\n            _settleGenesisRewardForNode(_user);\n        }\n    }\n\n    function _settleStaticRewardForOrder(uint256 _orderId) internal {\n        Order storage order = orders[_orderId];\n        if (order.isCompleted) {\n            return;\n        }\n\n        uint256 daysPassed = (block.timestamp.sub(order.lastSettleTime)).div(TIME_UNIT);\n        if (daysPassed == 0) return;\n\n        User storage user = users[order.user];\n        uint256 baseDailyRate = stakingLevels[order.level].dailyRate; // 70/80/90/100 (万分之一)\n\n        uint256 dailyReleaseUsdt = order.amount.mul(baseDailyRate).div(10000);\n \n        uint256 dailyReleaseHaf = dailyReleaseUsdt.mul(PRICE_PRECISION).div(hafPrice);\n\n        uint256 baseTotalReleaseHaf = dailyReleaseHaf.mul(daysPassed);\n        uint256 baseTotalReleaseUsdt = dailyReleaseUsdt.mul(daysPassed);\n        \n        uint256 actualBaseReleaseHaf = baseTotalReleaseHaf;\n        uint256 actualBaseReleaseUsdt = baseTotalReleaseUsdt;\n        \n        if (order.releasedHaf.add(baseTotalReleaseHaf) >= order.totalQuotaHaf) {\n            // 烧伤多余部分\n            actualBaseReleaseHaf = order.totalQuotaHaf.sub(order.releasedHaf);\n            // 按比例调整USDT额度\n            if (baseTotalReleaseHaf > 0) {\n                actualBaseReleaseUsdt = baseTotalReleaseUsdt.mul(actualBaseReleaseHaf).div(baseTotalReleaseHaf);\n            }\n            order.isCompleted = true;\n            \n            globalStats.totalCompletedOrders = globalStats.totalCompletedOrders.add(1);\n        }\n        \n        // 更新已释放的HAF数量和USDT额度\n        order.releasedHaf = order.releasedHaf.add(actualBaseReleaseHaf);\n        order.releasedQuota = order.releasedQuota.add(actualBaseReleaseUsdt);\n        \n        // 团队加速是额外奖励，基于实际释放的基础部分计算\n        uint256 accelerationBonus = teamLevels[user.teamLevel].accelerationBonus;\n        uint256 accelerationReleaseUsdt = 0;\n        uint256 accelerationReleaseHaf = 0;\n        \n        if (accelerationBonus > 0 && !order.isCompleted) {\n            // 加速基于实际释放的基础部分\n            accelerationReleaseUsdt = actualBaseReleaseUsdt.mul(accelerationBonus).div(100);\n            accelerationReleaseHaf = actualBaseReleaseHaf.mul(accelerationBonus).div(100);\n        }\n        \n        if (actualBaseReleaseUsdt > 0) {\n            uint256 userBasePart = actualBaseReleaseUsdt.mul(90).div(100);\n            uint256 genesisPart = actualBaseReleaseUsdt.sub(userBasePart); // 10%给创世节点池\n            \n            if (genesisPart > 0) {\n                globalGenesisPool = globalGenesisPool.add(genesisPart);\n            }\n            \n            // 记录基础静态收益\n            uint256 baseStaticHaf = actualBaseReleaseHaf.mul(90).div(100);\n            _addRewardRecord(order.user, address(0), RewardType.Static, userBasePart, baseStaticHaf);\n            \n            // 更新用户总静态产出（用于计算分享奖）\n            user.totalStaticOutput = user.totalStaticOutput.add(userBasePart);\n            _distributeShareRewards(order.user, userBasePart);\n        }\n        \n        if (accelerationReleaseUsdt > 0) {\n            uint256 teamBonusUsdt = accelerationReleaseUsdt.mul(90).div(100);\n            uint256 teamGenesisUsdt = accelerationReleaseUsdt.sub(teamBonusUsdt); // 10%给创世节点\n            \n            if (teamGenesisUsdt > 0) {\n                globalGenesisPool = globalGenesisPool.add(teamGenesisUsdt);\n            }\n            \n            uint256 teamBonusHaf = accelerationReleaseHaf.mul(90).div(100);\n            _addRewardRecord(order.user, address(0), RewardType.Team, teamBonusUsdt, teamBonusHaf);\n        }\n    }\n    \n    function _settleGenesisRewardForNode(address _node) internal {\n        User storage nodeUser = users[_node];\n        uint256 maxDividend = genesisNodeCost.mul(GENESIS_NODE_EXIT_MULTIPLIER);\n        \n        // 如果已经出局且不在活跃列表，直接返回\n        if (nodeUser.genesisDividendsWithdrawn >= maxDividend && !isActiveGenesisNode[_node]) {\n            return;\n        }\n\n        if (globalGenesisPool == 0) return;\n        \n        // ✅ 计算活跃节点数量\n        uint256 activeNodesCount = activeGenesisNodes.length;\n        if (activeNodesCount == 0) return;\n        \n        // ✅ 平均分配分红池 - 每个节点分配相同金额\n        uint256 claimableUsdt = globalGenesisPool.div(activeNodesCount);\n        \n        if (claimableUsdt > 0) {\n            uint256 actualClaim = claimableUsdt;\n            \n            // ✅ 先计算本次可领取金额，再检查是否超过3倍上限\n            uint256 afterClaimTotal = nodeUser.genesisDividendsWithdrawn.add(claimableUsdt);\n            \n            // 如果本次领取后会超过上限，调整领取金额（烧伤多余部分）\n            if (afterClaimTotal > maxDividend) {\n                actualClaim = maxDividend.sub(nodeUser.genesisDividendsWithdrawn);\n            }\n\n            // 计算对应的HAF数量并发送事件\n            if (actualClaim > 0) {\n                uint256 actualClaimHaf = actualClaim.mul(PRICE_PRECISION).div(hafPrice);\n                _addRewardRecord(_node, address(0), RewardType.Genesis, actualClaim, actualClaimHaf);\n            }\n            \n            // 更新已领取金额\n            nodeUser.genesisDividendsWithdrawn = nodeUser.genesisDividendsWithdrawn.add(actualClaim);\n            globalGenesisPool = globalGenesisPool.sub(actualClaim);\n            \n            // 如果达到上限，从活跃列表移除\n            if (nodeUser.genesisDividendsWithdrawn >= maxDividend) {\n                _removeActiveGenesisNode(_node);\n            }\n        }\n    }\n    \n    function _removeActiveGenesisNode(address _node) internal {\n        if (!isActiveGenesisNode[_node]) return;\n        \n        isActiveGenesisNode[_node] = false;\n        \n        // 从数组中移除\n        for (uint i = 0; i < activeGenesisNodes.length; i++) {\n            if (activeGenesisNodes[i] == _node) {\n                activeGenesisNodes[i] = activeGenesisNodes[activeGenesisNodes.length - 1];\n                activeGenesisNodes.pop();\n                break;\n            }\n        }\n    }\n\n    function _updateOrderSettleTimes(address _user) internal {\n        uint256[] memory orderIds = users[_user].orderIds;\n        \n        for (uint i = 0; i < orderIds.length; i++) {\n            Order storage order = orders[orderIds[i]];\n            if (!order.isCompleted) {\n                uint256 daysPassed = (block.timestamp.sub(order.lastSettleTime)).div(TIME_UNIT);\n                if (daysPassed > 0) {\n                    order.lastSettleTime = order.lastSettleTime.add(daysPassed.mul(TIME_UNIT));\n                }\n            }\n        }\n    }\n    \n    function _updateAncestorsPerformanceAndRewards(address _user, uint256 _amount, uint8 _level) internal {\n        address currentUser = _user;\n        address referrer = users[currentUser].referrer;\n\n        uint256[] memory directRewardRates = _getDirectRewardRates();\n        for (uint i = 0; i < 6 && referrer != address(0); i++) {\n            uint8 referrerLevel = _getUserHighestLevel(referrer);\n            uint256 receivableAmount = _calculateBurnableAmount(_amount, _level, referrerLevel);\n            \n            // 计算应得奖励\n            uint256 fullRewardUsdt = _amount.mul(directRewardRates[i]).div(100);\n            uint256 actualRewardUsdt = receivableAmount.mul(directRewardRates[i]).div(100);\n            \n            // 如果发生烧伤（receivableAmount < _amount），记录烧伤的USDT奖励额度\n            if (fullRewardUsdt > actualRewardUsdt) {\n                uint256 burnedRewardUsdt = fullRewardUsdt.sub(actualRewardUsdt);\n                // 烧伤的奖励不发放，直接丢弃（不需要燃烧HAF代币）\n                emit RewardBurned(referrer, _user, fullRewardUsdt, actualRewardUsdt, burnedRewardUsdt);\n            }\n            \n            // 发放实际奖励（只累加到总额，不触发事件）\n            if(actualRewardUsdt > 0) {\n                uint256 rewardHaf = actualRewardUsdt.mul(PRICE_PRECISION).div(hafPrice);\n                User storage referrerUser = users[referrer];\n                referrerUser.dynamicRewardTotal = referrerUser.dynamicRewardTotal.add(rewardHaf);\n                if (referrerUser.dynamicRewardStartTime == 0) {\n                    referrerUser.dynamicRewardStartTime = block.timestamp;\n                }\n            }\n            \n            currentUser = referrer;\n            referrer = users[currentUser].referrer;\n        }\n\n        currentUser = _user;\n        referrer = users[currentUser].referrer;\n        while(referrer != address(0)) {\n            users[referrer].teamTotalPerformance = users[referrer].teamTotalPerformance.add(_amount);\n            _updateUserTeamLevel(referrer);\n            \n            currentUser = referrer;\n            referrer = users[currentUser].referrer;\n        }\n    }\n\n    function _distributeShareRewards(address _user, uint256 _staticRewardUsdt) internal {\n        address currentUser = _user;\n        address referrer = users[currentUser].referrer;\n        \n        for (uint i = 0; i < 10 && referrer != address(0); i++) {\n            User storage referrerUser = users[referrer];\n            uint256 activeDirectCount = 0;\n            for (uint j = 0; j < referrerUser.directReferrals.length; j++) {\n                if (users[referrerUser.directReferrals[j]].totalStakedAmount > 0) {\n                    activeDirectCount++;\n                }\n            }\n\n            if (activeDirectCount <= i) {\n                break;\n            }\n            \n            // ✅ 计算完整奖励（未烧伤前）\n            uint256 fullRewardUsdt = _staticRewardUsdt.mul(5).div(100);\n            uint256 actualRewardUsdt = fullRewardUsdt;\n\n            uint8 referrerLevel = _getUserHighestLevel(referrer);\n            \n            // ✅ 修复：烧伤逻辑\n            if (referrerLevel < 4) {\n                uint256 referrerMaxAmount = stakingLevels[referrerLevel].maxAmount;\n                uint256 userTotalStaked = users[_user].totalStakedAmount;\n                \n                // 如果下级投资额超过推荐人级别上限，按比例烧伤\n                if (userTotalStaked > referrerMaxAmount) {\n                    actualRewardUsdt = fullRewardUsdt.mul(referrerMaxAmount).div(userTotalStaked);\n                    \n                    // 记录烧伤的奖励\n                    uint256 burnedRewardUsdt = fullRewardUsdt.sub(actualRewardUsdt);\n                    if (burnedRewardUsdt > 0) {\n                        emit RewardBurned(referrer, _user, fullRewardUsdt, actualRewardUsdt, burnedRewardUsdt);\n                    }\n                }\n            }\n\n            if(actualRewardUsdt > 0){\n                uint256 rewardHaf = actualRewardUsdt.mul(PRICE_PRECISION).div(hafPrice);\n                referrerUser.dynamicRewardTotal = referrerUser.dynamicRewardTotal.add(rewardHaf);\n                if (referrerUser.dynamicRewardStartTime == 0) {\n                    referrerUser.dynamicRewardStartTime = block.timestamp;\n                }\n                // ✅ 删除：不在这里记录事件，在 withdraw() 时统一记录\n                // _addRewardRecord(referrer, _user, RewardType.Share, actualRewardUsdt, rewardHaf);\n            }\n            \n            currentUser = referrer;\n            referrer = users[currentUser].referrer;\n        }\n    }\n    \n    // --- 团队等级更新 ---\n\n    function _updateUserTeamLevel(address _user) internal {\n        User storage user = users[_user];\n        if (user.directReferrals.length == 0) return;\n        \n        uint256 maxPerformance = 0;\n        uint256 directReferralsTotalPerformance = 0;\n        for(uint i = 0; i < user.directReferrals.length; i++){\n            address directChild = user.directReferrals[i];\n            uint256 childPerformance = users[directChild].totalStakedAmount.add(users[directChild].teamTotalPerformance);\n            directReferralsTotalPerformance = directReferralsTotalPerformance.add(childPerformance);\n            if(childPerformance > maxPerformance){\n                maxPerformance = childPerformance;\n            }\n        }\n        \n        uint256 smallAreaPerformance = directReferralsTotalPerformance.sub(maxPerformance);\n        uint8 oldLevel = user.teamLevel;\n        \n        for(uint8 i = 5; i > oldLevel; i--){\n            if(smallAreaPerformance >= teamLevels[i].requiredPerformance){\n                user.teamLevel = i;\n                emit TeamLevelUpdated(_user, oldLevel, i);\n                break;\n            }\n        }\n    }\n    \n    // 内部函数，用于添加收益记录\n    function _addRewardRecord(address _user, address _fromUser, RewardType _type, uint256 _usdtAmount, uint256 _hafAmount) internal {\n        emit RewardDistributed(_user, _fromUser, _type, _usdtAmount, _hafAmount);\n    }\n\n\n    // --- 视图函数 (View Functions for Frontend) ---\n    \n    function getUserInfo(address _user) external view returns (User memory, uint8, uint256, uint256) {\n        User storage u = users[_user];\n        uint8 highestLevel = _getUserHighestLevel(_user);\n        \n        uint256 maxP = 0;\n        uint256 totalP = 0;\n        for(uint i = 0; i < u.directReferrals.length; i++){\n            address child = u.directReferrals[i];\n            uint256 p = users[child].totalStakedAmount.add(users[child].teamTotalPerformance);\n            totalP = totalP.add(p);\n            if(p > maxP) maxP = p;\n        }\n        uint256 smallAreaP = totalP.sub(maxP);\n\n        return (u, highestLevel, totalP, smallAreaP);\n    }\n    \n    function getOrderInfo(uint256 _orderId) external view returns (Order memory) {\n        return orders[_orderId];\n    }\n    \n    function getClaimableRewards(address _user) public view returns (uint256 pendingStatic, uint256 pendingDynamic, uint256 pendingGenesis) {\n        pendingStatic = _calculatePendingStatic(_user);\n        pendingDynamic = _calculatePendingDynamic(_user);\n        pendingGenesis = _calculatePendingGenesis(_user);\n    }\n    \n    /**\n     * @dev 内部函数: 计算待领取的静态收益\n     */\n    function _calculatePendingStatic(address _user) internal view returns (uint256) {\n        User storage user = users[_user];\n        uint256 total = 0;\n        \n        for (uint i = 0; i < user.orderIds.length; i++) {\n            Order storage order = orders[user.orderIds[i]];\n            if (order.isCompleted) continue;\n            \n            uint256 daysPassed = (block.timestamp.sub(order.lastSettleTime)).div(TIME_UNIT);\n            if (daysPassed == 0) continue;\n\n            // ✅ 基础释放：按投资额计算USDT额度，再转换为HAF\n            uint256 baseDailyRate = stakingLevels[order.level].dailyRate;\n            uint256 dailyReleaseUsdt = order.amount.mul(baseDailyRate).div(10000);\n            uint256 dailyReleaseHaf = dailyReleaseUsdt.mul(PRICE_PRECISION).div(hafPrice);\n            \n            uint256 baseTotalReleaseHaf = dailyReleaseHaf.mul(daysPassed);\n            uint256 baseTotalReleaseUsdt = dailyReleaseUsdt.mul(daysPassed);\n            \n            // 检查HAF数量是否超过总额度\n            uint256 actualReleaseHaf = baseTotalReleaseHaf;\n            uint256 actualReleaseUsdt = baseTotalReleaseUsdt;\n            \n            if (order.releasedHaf.add(baseTotalReleaseHaf) >= order.totalQuotaHaf) {\n                actualReleaseHaf = order.totalQuotaHaf.sub(order.releasedHaf);\n                if (baseTotalReleaseHaf > 0) {\n                    actualReleaseUsdt = baseTotalReleaseUsdt.mul(actualReleaseHaf).div(baseTotalReleaseHaf);\n                }\n            }\n            \n            // 团队加速是额外奖励\n            uint256 accelerationBonus = teamLevels[user.teamLevel].accelerationBonus;\n            uint256 accelerationHaf = 0;\n            \n            if (accelerationBonus > 0) {\n                accelerationHaf = actualReleaseHaf.mul(accelerationBonus).div(100);\n            }\n            \n            // 计算总HAF收益（基础90% + 加速90%）\n            uint256 baseHaf = actualReleaseHaf.mul(90).div(100);\n            uint256 bonusHaf = 0;\n            if (accelerationHaf > 0) {\n                bonusHaf = accelerationHaf.mul(90).div(100);\n            }\n            \n            total = total.add(baseHaf).add(bonusHaf);\n        }\n        \n        return total;\n    }\n    \n    /**\n     * @dev 内部函数: 计算待领取的动态收益\n     * ✅ 修复：按天释放，每天释放 总额/100天\n     */\n    function _calculatePendingDynamic(address _user) internal view returns (uint256) {\n        User storage user = users[_user];\n        \n        if (user.dynamicRewardTotal == 0 || user.dynamicRewardStartTime == 0) {\n            return 0;\n        }\n        \n        // ✅ 计算已经过了多少天\n        uint256 daysPassed = (block.timestamp.sub(user.dynamicRewardStartTime)).div(TIME_UNIT);\n        \n        // ✅ 如果超过100天，全部释放\n        if (daysPassed >= 100) {\n            if (user.dynamicRewardTotal > user.dynamicRewardClaimed) {\n                return user.dynamicRewardTotal.sub(user.dynamicRewardClaimed);\n            }\n            return 0;\n        }\n        \n        // ✅ 每天释放 总额/100\n        uint256 dailyRelease = user.dynamicRewardTotal.div(100);\n        uint256 totalReleased = dailyRelease.mul(daysPassed);\n        \n        // ✅ 返回已释放但未领取的部分\n        if (totalReleased > user.dynamicRewardClaimed) {\n            return totalReleased.sub(user.dynamicRewardClaimed);\n        }\n        \n        return 0;\n    }\n    \n\n    function _calculatePendingGenesis(address _user) internal view returns (uint256) {\n        User storage user = users[_user];\n        \n        if (!user.isGenesisNode) {\n            return 0;\n        }\n        \n        uint256 maxDividend = genesisNodeCost.mul(GENESIS_NODE_EXIT_MULTIPLIER);\n        if (user.genesisDividendsWithdrawn >= maxDividend || globalGenesisPool == 0) {\n            return 0;\n        }\n        \n        uint256 activeNodesCount = activeGenesisNodes.length;\n        if (activeNodesCount == 0) {\n            return 0;\n        }\n        \n        uint256 claimableUsdt = globalGenesisPool.div(activeNodesCount);\n        if (user.genesisDividendsWithdrawn.add(claimableUsdt) > maxDividend) {\n            claimableUsdt = maxDividend.sub(user.genesisDividendsWithdrawn);\n        }\n        \n        return claimableUsdt.mul(PRICE_PRECISION).div(hafPrice);\n        // ================================================\n    }\n    \n    function getUserOrders(address _user) external view returns (Order[] memory) {\n        uint256[] memory orderIds = users[_user].orderIds;\n        Order[] memory userOrders = new Order[](orderIds.length);\n        for(uint i = 0; i < orderIds.length; i++) {\n            userOrders[i] = orders[orderIds[i]];\n        }\n        return userOrders;\n    }\n    \n    /**\n     * @dev 提示：收益记录已改为事件方式，请前端监听 RewardDistributed 事件\n     * 可以通过过滤 user 参数来获取指定用户的收益记录\n     */\n    \n    function getDirectReferrals(address _user) external view returns (TeamMemberInfo[] memory) {\n        address[] memory directReferrals = users[_user].directReferrals;\n        TeamMemberInfo[] memory members = new TeamMemberInfo[](directReferrals.length);\n\n        for (uint i = 0; i < directReferrals.length; i++) {\n            User storage member = users[directReferrals[i]];\n            members[i] = TeamMemberInfo(\n                directReferrals[i],\n                member.teamLevel,\n                member.totalStakedAmount,\n                member.teamTotalPerformance\n            );\n        }\n        return members;\n    }\n    \n    /**\n     * @dev 获取某个订单的待释放静态收益(不结算,纯计算)\n     */\n    function getOrderPendingReward(uint256 _orderId) external view returns (uint256 pendingUsdt, uint256 pendingHaf) {\n        Order storage order = orders[_orderId];\n        if (order.isCompleted) {\n            return (0, 0);\n        }\n\n        User storage user = users[order.user];\n        // ✅ 按天数计算\n        uint256 daysPassed = (block.timestamp.sub(order.lastSettleTime)).div(TIME_UNIT);\n        if (daysPassed == 0) return (0, 0);\n\n        // ✅ 基础释放：按投资额计算USDT额度，再转换为HAF\n        uint256 baseDailyRate = stakingLevels[order.level].dailyRate;\n        uint256 dailyReleaseUsdt = order.amount.mul(baseDailyRate).div(10000);\n        uint256 dailyReleaseHaf = dailyReleaseUsdt.mul(PRICE_PRECISION).div(hafPrice);\n        \n        uint256 baseTotalReleaseHaf = dailyReleaseHaf.mul(daysPassed);\n        uint256 baseTotalReleaseUsdt = dailyReleaseUsdt.mul(daysPassed);\n        \n        // 检查HAF数量是否超过总额度\n        uint256 actualReleaseHaf = baseTotalReleaseHaf;\n        uint256 actualReleaseUsdt = baseTotalReleaseUsdt;\n        \n        if (order.releasedHaf.add(baseTotalReleaseHaf) >= order.totalQuotaHaf) {\n            actualReleaseHaf = order.totalQuotaHaf.sub(order.releasedHaf);\n            if (baseTotalReleaseHaf > 0) {\n                actualReleaseUsdt = baseTotalReleaseUsdt.mul(actualReleaseHaf).div(baseTotalReleaseHaf);\n            }\n        }\n        \n        // 团队加速是额外奖励\n        uint256 accelerationBonus = teamLevels[user.teamLevel].accelerationBonus;\n        uint256 accelerationHaf = 0;\n        uint256 accelerationUsdt = 0;\n        \n        if (accelerationBonus > 0) {\n            accelerationHaf = actualReleaseHaf.mul(accelerationBonus).div(100);\n            accelerationUsdt = actualReleaseUsdt.mul(accelerationBonus).div(100);\n        }\n\n        // 计算总USDT和HAF（基础90% + 加速90%）\n        uint256 userPartUsdt = actualReleaseUsdt.mul(90).div(100);\n        uint256 accelerationPartUsdt = 0;\n        if (accelerationUsdt > 0) {\n            accelerationPartUsdt = accelerationUsdt.mul(90).div(100);\n        }\n        \n        uint256 userPartHaf = actualReleaseHaf.mul(90).div(100);\n        uint256 accelerationPartHaf = 0;\n        if (accelerationHaf > 0) {\n            accelerationPartHaf = accelerationHaf.mul(90).div(100);\n        }\n        \n        pendingUsdt = userPartUsdt.add(accelerationPartUsdt);\n        pendingHaf = userPartHaf.add(accelerationPartHaf);\n        \n        return (pendingUsdt, pendingHaf);\n    }\n    \n    /**\n     * @dev 获取用户的推荐人统计(按等级分类)\n     */\n    function getUserReferralStats(address _user) external view returns (\n        uint256 totalReferrals,\n        uint256 bronzeCount,\n        uint256 silverCount,\n        uint256 goldCount,\n        uint256 diamondCount\n    ) {\n        address[] memory directReferrals = users[_user].directReferrals;\n        totalReferrals = directReferrals.length;\n        \n        for (uint i = 0; i < directReferrals.length; i++) {\n            uint8 level = _getUserHighestLevel(directReferrals[i]);\n            if (level == 1) bronzeCount++;\n            else if (level == 2) silverCount++;\n            else if (level == 3) goldCount++;\n            else if (level == 4) diamondCount++;\n        }\n        \n        return (totalReferrals, bronzeCount, silverCount, goldCount, diamondCount);\n    }\n    \n    /**\n     * @dev 获取用户团队业绩详情\n     */\n    function getTeamPerformanceDetails(address _user) external view returns (\n        uint256 totalPerformance,\n        uint256 largestArea,\n        uint256 smallArea,\n        uint256 directReferralsCount\n    ) {\n        User storage user = users[_user];\n        directReferralsCount = user.directReferrals.length;\n        \n        uint256 maxP = 0;\n        uint256 totalP = 0;\n        for(uint i = 0; i < user.directReferrals.length; i++){\n            address child = user.directReferrals[i];\n            uint256 p = users[child].totalStakedAmount.add(users[child].teamTotalPerformance);\n            totalP = totalP.add(p);\n            if(p > maxP) maxP = p;\n        }\n        \n        return (user.teamTotalPerformance, maxP, totalP.sub(maxP), directReferralsCount);\n    }\n    \n    /**\n     * @dev 获取全局统计数据\n     */\n    function getGlobalStats() external view returns (\n        uint256 totalStakedUsdt,\n        uint256 totalOrders,\n        uint256 totalGenesisNodesCount,\n        uint256 currentHafPrice,\n        uint256 contractUsdtBalance,\n        uint256 contractHafBalance,\n        GlobalStatistics memory statistics\n    ) {\n        totalOrders = orders.length;\n        totalGenesisNodesCount = genesisNodes.length;\n        currentHafPrice = hafPrice;\n        contractUsdtBalance = usdtToken.balanceOf(address(this));\n        contractHafBalance = balanceOf(address(this));\n        \n        // 计算当前活跃质押金额(未完成订单)\n        for (uint i = 0; i < orders.length; i++) {\n            if (!orders[i].isCompleted) {\n                totalStakedUsdt = totalStakedUsdt.add(orders[i].amount);\n            }\n        }\n        \n        statistics = globalStats;\n        \n        return (totalStakedUsdt, totalOrders, totalGenesisNodesCount, currentHafPrice, contractUsdtBalance, contractHafBalance, statistics);\n    }\n\n    function _distributeHaf(address _recipient, uint256 _amount) internal {\n        uint256 treasuryBalance = balanceOf(address(this));\n        require(treasuryBalance >= _amount, \"HashFi: Insufficient HAF in treasury for distribution\");\n        _transfer(address(this), _recipient, _amount);\n        globalStats.totalHafDistributed = globalStats.totalHafDistributed.add(_amount);\n    }\n\n    function _getStakingLevelByAmount(uint256 _amount) internal view returns (uint8) {\n        for (uint8 i = 1; i <= 4; i++) {\n            if (_amount >= stakingLevels[i].minAmount && _amount <= stakingLevels[i].maxAmount) {\n                return i;\n            }\n        }\n        return 0;\n    }\n\n    function _getUserHighestLevel(address _user) internal view returns (uint8) {\n        if (_user == owner()) {\n            return 4;\n        }\n        \n        if (users[_user].isGenesisNode) {\n            return 4;\n        }\n        \n        uint8 maxLevel = 0;\n        uint256[] memory orderIds = users[_user].orderIds;\n        for (uint i = 0; i < orderIds.length; i++) {\n            if (orders[orderIds[i]].level > maxLevel) {\n                maxLevel = orders[orderIds[i]].level;\n            }\n        }\n        return maxLevel;\n    }\n\n    function _calculateBurnableAmount(uint256 _originalAmount, uint8 _investorLevel, uint8 _referrerLevel) internal view returns (uint256) {\n        if (_referrerLevel >= _investorLevel || _referrerLevel == 4) {\n            return _originalAmount;\n        }\n        if (_originalAmount <= stakingLevels[_referrerLevel].maxAmount) {\n            return _originalAmount;\n        }\n        return stakingLevels[_referrerLevel].maxAmount;\n    }\n\n    function _getDirectRewardRates() internal pure returns (uint256[] memory) {\n        uint256[] memory rates = new uint256[](6);\n        rates[0] = 5; rates[1] = 3; rates[2] = 1; rates[3] = 1; rates[4] = 1; rates[5] = 1;\n        return rates;\n    }\n\n    // --- 后台管理函数 ---\n\n    // 创世节点审核\n    function approveGenesisNode(address _applicant) external onlyOwner {\n        require(genesisNodeApplications[_applicant], \"No pending application\");\n        User storage user = users[_applicant];\n        require(!user.isGenesisNode, \"Already approved\");\n        \n        genesisNodeApplications[_applicant] = false;\n        _removeFromPendingApplications(_applicant);\n        \n        user.isGenesisNode = true;\n        genesisNodes.push(_applicant);\n        \n        // ✅ 添加到活跃节点列表\n        activeGenesisNodes.push(_applicant);\n        isActiveGenesisNode[_applicant] = true;\n        \n        // totalGenesisShares 不再使用，改为平均分配\n        \n        emit GenesisNodeApproved(_applicant);\n    }\n    \n    function rejectGenesisNode(address _applicant) external onlyOwner {\n        require(genesisNodeApplications[_applicant], \"No pending application\");\n        \n        genesisNodeApplications[_applicant] = false;\n        _removeFromPendingApplications(_applicant);\n        \n        // 退还申请费用\n        usdtToken.transfer(_applicant, genesisNodeCost);\n        \n        emit GenesisNodeRejected(_applicant);\n    }\n    \n\n    function _removeFromPendingApplications(address _applicant) internal {\n        for (uint i = 0; i < pendingGenesisApplications.length; i++) {\n            if (pendingGenesisApplications[i] == _applicant) {\n                pendingGenesisApplications[i] = pendingGenesisApplications[pendingGenesisApplications.length - 1];\n                pendingGenesisApplications.pop();\n                break;\n            }\n        }\n    }\n\n    function setHafPrice(uint256 _newPrice) external onlyOwner {\n        require(_newPrice > 0, \"Price must be positive\");\n        hafPrice = _newPrice;\n        lastPriceUpdateTime = block.timestamp;\n        emit PriceUpdated(_newPrice);\n    }\n    \n    /**\n     * @dev 设置每日价格涨幅(千分比)\n     */\n    function setDailyPriceIncreaseRate(uint256 _rate) external onlyOwner {\n        require(_rate <= 100, \"Rate too high\"); // 最高10%每天\n        dailyPriceIncreaseRate = _rate;\n    }\n\n    function setAutoPriceUpdate(bool _enabled) external onlyOwner {\n        autoPriceUpdateEnabled = _enabled;\n    }\n    \n    /**\n     * @dev 手动触发价格更新(公开函数,任何人都可调用)\n     */\n    function updatePrice() external {\n        _updatePriceIfNeeded();\n    }\n\n    function setWithdrawalFee(uint256 _newFeeRate) external onlyOwner {\n        require(_newFeeRate <= 100, \"Fee rate cannot exceed 100%\");\n        withdrawalFeeRate = _newFeeRate;\n    }\n    \n    \n    /**\n     * @dev 修改质押级别参数\n     */\n    function updateStakingLevel(\n        uint8 _level, \n        uint256 _minAmount, \n        uint256 _maxAmount, \n        uint256 _multiplier, \n        uint256 _dailyRate\n    ) external onlyOwner {\n        require(_level >= 1 && _level <= 4, \"Invalid level\");\n        require(_minAmount < _maxAmount, \"Invalid amount range\");\n        require(_multiplier > 0 && _dailyRate > 0, \"Invalid parameters\");\n        \n        stakingLevels[_level] = StakingLevelInfo(_minAmount, _maxAmount, _multiplier, _dailyRate);\n    }\n    \n    /**\n     * @dev 修改团队级别要求\n     */\n    function updateTeamLevel(\n        uint8 _level,\n        uint256 _requiredPerformance,\n        uint256 _accelerationBonus\n    ) external onlyOwner {\n        require(_level >= 0 && _level <= 5, \"Invalid team level\");\n        require(_accelerationBonus <= 100, \"Bonus cannot exceed 100%\");\n        \n        if (_level < teamLevels.length) {\n            teamLevels[_level] = TeamLevelInfo(_requiredPerformance, _accelerationBonus);\n        }\n    }\n    \n\n    function forceSettleUser(address _user) external onlyOwner {\n        _settleUserRewards(_user);\n    }\n\n    function setUserTeamLevel(address _user, uint8 _level) external onlyOwner {\n        require(_level >= 0 && _level <= 5, \"Invalid team level\");\n        uint8 oldLevel = users[_user].teamLevel;\n        users[_user].teamLevel = _level;\n        emit TeamLevelUpdated(_user, oldLevel, _level);\n    }\n    \n    function getAllGenesisNodesInfo() external view onlyOwner returns (\n        address[] memory nodes,\n        uint256[] memory totalDividends,\n        uint256[] memory withdrawn\n    ) {\n        uint256 length = genesisNodes.length;\n        nodes = new address[](length);\n        totalDividends = new uint256[](length);\n        withdrawn = new uint256[](length);\n        \n        uint256 maxDividend = genesisNodeCost.mul(GENESIS_NODE_EXIT_MULTIPLIER);\n        \n        for (uint i = 0; i < length; i++) {\n            nodes[i] = genesisNodes[i];\n            totalDividends[i] = maxDividend;\n            withdrawn[i] = users[genesisNodes[i]].genesisDividendsWithdrawn;\n        }\n        \n        return (nodes, totalDividends, withdrawn);\n    }\n\n    function setGenesisNodeCost(uint256 _newCost) external onlyOwner {\n        require(_newCost > 0, \"Cost must be positive\");\n        genesisNodeCost = _newCost;\n    }\n\n    function setSwapFee(uint256 _newFeeRate) external onlyOwner {\n        require(_newFeeRate <= 100, \"Fee rate cannot exceed 100%\");\n        swapFeeRate = _newFeeRate;\n    }\n\n    function updateBtcStats(\n        uint256 _totalHashrate,\n        uint256 _globalHashrate,\n        uint256 _dailyRewardPerT,\n        uint256 _currentDifficulty,\n        uint256 _btcPrice,\n        uint256 _nextHalvingTime\n    ) external onlyOwner {\n        btcStats.totalHashrate = _totalHashrate;\n        btcStats.globalHashrate = _globalHashrate;\n        btcStats.dailyRewardPerT = _dailyRewardPerT;\n        btcStats.currentDifficulty = _currentDifficulty;\n        btcStats.btcPrice = _btcPrice;\n        btcStats.nextHalvingTime = _nextHalvingTime;\n        btcStats.lastUpdateTime = block.timestamp;\n    }\n\n    function updateTotalMined(uint256 _increment) external onlyOwner {\n        btcStats.totalMined = btcStats.totalMined.add(_increment);\n        btcStats.yesterdayMined = _increment;\n        btcStats.lastUpdateTime = block.timestamp;\n    }\n\n    function getBtcStats() external view returns (BtcMiningStats memory) {\n        return btcStats;\n    }\n\n    function getPendingGenesisApplications() external view onlyOwner returns (address[] memory) {\n        return pendingGenesisApplications;\n    }\n    \n    /**\n     * @dev 检查地址是否有待审核的申请\n     */\n    function isApplicationPending(address _user) external view returns (bool) {\n        return genesisNodeApplications[_user];\n    }\n    \n    /**\n     * @dev 获取活跃创世节点列表\n     */\n    function getActiveGenesisNodes() external view returns (address[] memory) {\n        return activeGenesisNodes;\n    }\n    \n    /**\n     * @dev 获取所有创世节点（包括已出局的）\n     */\n    function getAllGenesisNodes() external view returns (address[] memory) {\n        return genesisNodes;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function emergencyWithdrawToken(address _tokenAddress, uint256 _amount) external onlyOwner {\n        require(_tokenAddress != address(0), \"Token address cannot be zero\");\n        IERC20 token = IERC20(_tokenAddress);\n        uint256 balance = token.balanceOf(address(this));\n        require(_amount > 0, \"Amount must be greater than zero\");\n        require(balance >= _amount, \"Insufficient token balance in contract\");\n        \n        token.transfer(owner(), _amount);\n    }\n}"},"@openzeppelin/contracts/security/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"}}}